<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\PaymentInformation;
use Illuminate\Support\Facades\Auth;

class PaymentController extends Controller
{
    public $gateway;

    public function __construct() {
        $this->gateway = new \Braintree\Gateway([
            'environment' => env('BRAINTREE_ENV'),
            'merchantId' => env('BRAINTREE_MERCHANT_ID'),
            'publicKey' => env('BRAINTREE_PUBLIC_KEY'),
            'privateKey' => env('BRAINTREE_PRIVATE_KEY')
        ]);
    }
    public function brainTreeTransaction(Request $request) {

        if (!empty($request->action) && $request->action == 'generateclienttoken') {
            return $this->gateway->clientToken()->generate();
        }
        
        $sale = array(
            'amount'   => $request->amount,
            'orderId'  => $request->invoiceid,
            'paymentMethodNonce' => $request->payment_method_nonce,   // Autogenerated field from braintree
            'customer' => array(
                            'firstName' => $request->c_firstname,
                            'lastName'  => $request->c_lastname,
                            'phone'     => $request->c_phonenumber,
                            'email'     => $request->c_email,
                          ),
            'billing' => array(
                            'firstName'         => $request->firstname,
                            'lastName'          => $request->lastname,
                            'streetAddress'     => $request->address1,
                            'extendedAddress'   => $request->address2,
                            'locality'          => $request->city,
                            'region'            => $request->state,
                            'postalCode'        => $request->postcode,
                            'countryCodeAlpha2' => $request->country
                         ),
            'options' => array(
                            'submitForSettlement'   => true,
                            'storeInVaultOnSuccess' => true
                         )
        );

        

        $result = $this->gateway->transaction()->sale($sale);
        if ($result->success) {
            $uid = Auth::user()->id;
            $payment_id = $result->transaction->id;
            $submit_status = $result->transaction->status;
            $payment_type = $result->transaction->type;
            $amount = $result->transaction->amount;
            $currency_code = $result->transaction->currencyIsoCode;
            $order_id = $result->transaction->orderId;
            $transaction_id = $result->transaction->networkTransactionId;

            $paymentInformation = new PaymentInformation;
            $paymentInformation->uid = $uid;
            $paymentInformation->payment_id = $payment_id;
            $paymentInformation->submit_status = $submit_status;
            $paymentInformation->amount = $amount;
            $paymentInformation->currency_code = $currency_code;
            $paymentInformation->order_id = $order_id;
            $paymentInformation->transaction_id = $transaction_id;
            $paymentInformation->payment_type = 'credit_card';
            $paymentInformation->save();

            return redirect('/dashboard')->with('msg', 'Thank you for Payment.');
        } else {
            return redirect('/dashboard')->with('error', 'There is something wrong with the Payment Process. Please try again later');
        }
        
    }

    public function selectPlan($planId) {
        // dd($this->gateway->merchantAccount()->all());
        $result = $this->gateway->subscription()->create([
            'paymentMethodNonce' => $request->payment_method_nonce,
            'planId' => $planId
          ]);

          dd($result);
    }
}
